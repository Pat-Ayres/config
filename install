#!/usr/bin/env bash

set -e  # Exit immediately if a command exits with a non-zero status

# Detect the operating system
detect_os() {
    case "$(uname -s)" in
        Linux)
            echo "linux"
            ;;
        Darwin)
            echo "macos"
            ;;
        *)
            echo "unsupported"
            ;;
    esac
}

brew_setup() {
  # Check if Homebrew is installed
  if ! command -v brew &> /dev/null; then
    echo "Homebrew not found, installing..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  echo "installing brew packages..."

  echo "Brew setup completed."
}

font_setup() {
  echo "installing font..."
  local fonts_dir

  if [[ $OS == "linux" ]]; then
    fonts_dir=${HOME}/.local/share/fonts
  elif [[ $OS == "macos" ]]; then
    fonts_dir=${HOME}/Library/Fonts
  fi

  wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/CascadiaCode.zip
  unzip CascadiaCode.zip -d "$fonts_dir"
  fc-cache -fv
  rm -rf CascadiaCode.zip
}

zsh_setup() {
  if ! command -v zsh; then
    # TODO: install zsh if it is not already installed instead of skipping setup
    echo "zsh not found, skipping setup..."
    return
  fi

  echo "installing oh-my-zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

  if [[ "$SHELL" != "$(command -v zsh)" ]]; then
    echo "switching default shell to zsh..."
    sudo chsh --shell "$(which zsh)" "$(whoami)"
  fi
}

# Global setup function
global_setup() {
  echo "Starting global setup..."

  ### RUSTBTW ###
  if ! command -v rustup; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  fi
  rustup install nightly
  cargo install --locked \
    atuin \
    bat \
    eza \
    ripgrep

  zsh_setup
    
  font_setup

  echo "installing starship..."
  curl -fsSL https://starship.rs/install.sh | sh -s -- --bin-dir $LOCAL_BIN --yes

  echo "installing neovim..."
  git clone https://github.com/neovim/neovim
  cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$LOCAL_BIN
  make install
  rm -rf neovim

  echo "symlinking dots..."
  ln -sf ${SCRIPT_DIR}/bash_aliases ${HOME}/.bash_aliases
  ln -sf ${SCRIPT_DIR}/bashrc ${HOME}/.bashrc
  ln -sf ${SCRIPT_DIR}/ghostty ${HOME}/.config/ghostty
  ln -sf ${SCRIPT_DIR}/gitconfig ${HOME}/.gitconfig
  ln -sf ${SCRIPT_DIR}/inputrc ${HOME}/.inputrc
  ln -sf ${SCRIPT_DIR}/kitty ${HOME}/.config/kitty
  ln -sf ${SCRIPT_DIR}/neovim-conf ${HOME}/.config/nvim
  ln -sf ${SCRIPT_DIR}/profile ${HOME}/.profile
  ln -sf ${SCRIPT_DIR}/ruby-version ${HOME}/.ruby-version
  ln -sf ${SCRIPT_DIR}/starship.toml ${HOME}/.config/starship.toml
  ln -sf ${SCRIPT_DIR}/tmux ${HOME}/.tmux
  ln -sf ${SCRIPT_DIR}/tmux.conf ${HOME}/.tmux.conf
  ln -sf ${SCRIPT_DIR}/zprofile ${HOME}/.zprofile
  ln -sf ${SCRIPT_DIR}/zshaliases ${HOME}/.oh-my-zsh/custom/aliases.zsh
  ln -sf ${SCRIPT_DIR}/zshenv ${HOME}/.zshenv
  ln -sf ${SCRIPT_DIR}/zshrc ${HOME}/.zshrc

  echo "Global setup completed."
}

# Main script logic
main() {
  LOCAL_BIN="${HOME}/.local/bin"
  OS=$(detect_os)

  if [[ $OS == "unsupported" ]]; then
    echo "Unsupported operating system."
    exit 1
  fi

  global_setup

  echo "System bootstrap completed."
}

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Execute the main function
main
